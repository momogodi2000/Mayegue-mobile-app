// Mocks generated by Mockito 5.4.5 from annotations
// in mayegue/test/unit/services/offline_sync_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i8;
import 'package:mayegue/core/database/local_database_service.dart' as _i4;
import 'package:mayegue/core/models/sync_operation.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i3;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_1 extends _i1.SmartFake
    implements _i3.SharedPreferences {
  _FakeSharedPreferences_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseService extends _i1.Mock
    implements _i4.LocalDatabaseService {
  MockLocalDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i2.Database>);

  @override
  _i5.Future<_i3.SharedPreferences> get preferences => (super.noSuchMethod(
        Invocation.getter(#preferences),
        returnValue:
            _i5.Future<_i3.SharedPreferences>.value(_FakeSharedPreferences_1(
          this,
          Invocation.getter(#preferences),
        )),
      ) as _i5.Future<_i3.SharedPreferences>);

  @override
  _i5.Future<List<_i6.SyncOperation>> getPendingSyncOperations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingSyncOperations,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.SyncOperation>>.value(<_i6.SyncOperation>[]),
      ) as _i5.Future<List<_i6.SyncOperation>>);

  @override
  _i5.Future<void> savePendingSyncOperations(
          List<_i6.SyncOperation>? operations) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePendingSyncOperations,
          [operations],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateSyncOperation(_i6.SyncOperation? operation) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSyncOperation,
          [operation],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateDictionaryEntryFirebaseId(
    String? localId,
    String? firebaseId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDictionaryEntryFirebaseId,
          [
            localId,
            firebaseId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> insertDictionaryEntry(Map<String, dynamic>? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertDictionaryEntry,
          [entry],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getDictionaryEntries({
    String? languageCode,
    String? contributorId,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDictionaryEntries,
          [],
          {
            #languageCode: languageCode,
            #contributorId: contributorId,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<DateTime?> getLastSyncTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastSyncTime,
          [],
        ),
        returnValue: _i5.Future<DateTime?>.value(),
      ) as _i5.Future<DateTime?>);

  @override
  _i5.Future<void> saveLastSyncTime(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #saveLastSyncTime,
          [time],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setMetadata(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMetadata,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getMetadata(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [key],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> cleanupExpiredOperations() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredOperations,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i7.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i8.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i5.Stream<_i8.ConnectivityResult>.empty(),
      ) as _i5.Stream<_i8.ConnectivityResult>);

  @override
  _i5.Future<_i8.ConnectivityResult> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i5.Future<_i8.ConnectivityResult>.value(
            _i8.ConnectivityResult.bluetooth),
      ) as _i5.Future<_i8.ConnectivityResult>);
}
